version: "3.8"

services:
  vault:
    image: hashicorp/vault:1.20.2
    container_name: vault
    ports:
      - "8200:8200"
    env_file:
      - .env
    cap_add:
      - IPC_LOCK # prevent Vault from swapping to disk
    command: "server -dev"
    networks:
      devops_network:

  docker:
    image: docker:dind
    container_name: docker_dind
    privileged: true
    restart: unless-stopped
    environment:
      - DOCKER_TLS_CERTDIR=/certs
    volumes:
      - jenkins-docker-certs:/certs/client
      - jenkins-data:/var/jenkins_home
    ports:
      - "2376:2376"
    command: ["--storage-driver=overlay2"]
    networks:
      devops_network:
        aliases:
          - docker

  jenkins:
    build:
      context: .
      dockerfile: Dockerfile.jenkins
    container_name: jenkins_blueocean
    user: root
    restart: unless-stopped
    ports:
      - "{{ jenkins.port }}:8080"
      - "50000:50000"
    volumes:
      - jenkins-data:/var/jenkins_home
      - jenkins-docker-certs:/certs/client:ro
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - docker
    networks:
      devops_network:

  grafana:
    image: grafana/grafana:latest-ubuntu
    container_name: grafana
    ports:
      - "{{ grafana.port }}:3000"
    restart: always
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana/grafana-datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=1234
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      devops_network:

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "{{ prometheus.port }}:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    restart: always
    networks:
      devops_network:

  sonarqube:
    image: sonarqube:25.8.0.112029-community
    container_name: sonarqube
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://sonardb:5432/sonarqube
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar
      SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: "true"
    restart: unless-stopped
    ports:
      - "{{ sonarqube.port }}:9000"
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    depends_on:
      - sonardb
    networks:
      devops_network:

  sonardb:
    image: postgres:13.22-alpine3.22
    container_name: sonardb
    restart: unless-stopped
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar
      POSTGRES_DB: sonarqube
    volumes:
      - sonardb_data:/var/lib/postgresql/data
    networks:
      devops_network:

  mongo-express:
    image: mongo-express
    container_name: mongo_express
    restart: always
    ports:
      - "{{ mongo_express.port }}:8081"
    environment:
      - ME_CONFIG_MONGODB_SERVER={{ hostvars[groups['db'][0]].private_ip }}
      - ME_CONFIG_MONGODB_PORT={{ mongo_express.mongodb_port }}
      - ME_CONFIG_BASICAUTH_USERNAME={{ mongo_express.username }}
      - ME_CONFIG_BASICAUTH_PASSWORD={{ mongo_express.password }}
      - ME_CONFIG_OPTIONS_HEALTH_CHECK_PATH=true
    networks:
      devops_network:

  cadvisor:
    image: gcr.io/cadvisor/cadvisor-amd64:v0.51.0
    container_name: cadvisor
    ports:
      - "8005:8080"
    restart: always
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    privileged: true
    networks:
      devops_network:

volumes:
  jenkins-data:
  jenkins-docker-certs:
  grafana-storage:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  sonardb_data:

networks:
  devops_network:
    name: devops_network
    driver: bridge
